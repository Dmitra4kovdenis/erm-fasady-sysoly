// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// пользователь как модель для авторизации
model User {
  id           Int            @id @default(autoincrement())
  login        String         @unique
  roleId       Int
  role         Role           @relation(fields: [roleId], references: [id])
  password     String
  customerId   Int?           @unique
  customer     Customer?      @relation(fields: [customerId], references: [id])
  workerId     Int?           @unique
  worker       Worker?        @relation(fields: [workerId], references: [id])
  adminId      Int?           @unique
  admin        Admin?         @relation(fields: [adminId], references: [id])
  createdAt    DateTime       @default(now())
  comments     WorkComment[]
  orderHistory OrderHistory[]
}

model Role {
  id    Int    @id @default(autoincrement())
  title String
  users User[]
}

// заказчик
model Customer {
  id          Int     @id @default(autoincrement())
  name        String
  phone       String
  companyName String
  orders      Order[]
  user        User?
}

// специалист
model Worker {
  id            Int            @id @default(autoincrement())
  name          String
  phone         String
  user          User?
  typeId        Int
  type          WorkType       @relation(fields: [typeId], references: [id])
  activeOrders  Order[]
  workTimelines WorkTimeline[]
}

// администратор
model Admin {
  id    Int    @id @default(autoincrement())
  name  String
  phone String
  user  User?
}

// тип работника (кровельщик, маляр, упаковщик)
model WorkType {
  id     Int           @id @default(autoincrement())
  title  String
  worker Worker[]
  status OrderStatus[]
}

// интегрированные ручки
model Handle {
  id      Int      @id @default(autoincrement())
  title   String
  fasades Facade[]
}

// фрезеровки
model Milling {
  id      Int      @id @default(autoincrement())
  title   String
  fasades Facade[]
}

// фасады
model Facade {
  id        Int     @id @default(autoincrement())
  height    Float
  width     Float
  thickness Float
  handle    Handle  @relation(fields: [handleId], references: [id])
  handleId  Int
  radius    Float
  milling   Milling @relation(fields: [millingId], references: [id])
  millingId Int
  color     String
  count     Int
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
}

// статус работы
model OrderStatus {
  id            Int            @id @default(autoincrement())
  title         String
  index         Int
  slug          String
  orders        Order[]
  workTypeId    Int?
  workType      WorkType?      @relation(fields: [workTypeId], references: [id])
  workTimelines WorkTimeline[]
}

model WorkComment {
  id        Int       @id @default(autoincrement())
  text      String?
  timeSpent DateTime?
  createdAt DateTime  @default(now())
  orderId   Int
  order     Order     @relation(fields: [orderId], references: [id])
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
}

model WorkTimeline {
  id        Int         @id @default(autoincrement())
  comment   String?
  dateStart DateTime
  dateEnd   DateTime
  createdAt DateTime    @default(now())
  orderId   Int
  order     Order       @relation(fields: [orderId], references: [id])
  workerId  Int
  worker    Worker      @relation(fields: [workerId], references: [id])
  statusId  Int
  status    OrderStatus @relation(fields: [statusId], references: [id])
}

model OrderHistory {
  id          Int      @id @default(autoincrement())
  text        String
  createdAt   DateTime @default(now())
  orderId     Int
  order       Order    @relation(fields: [orderId], references: [id])
  initiatorId Int
  initiator   User     @relation(fields: [initiatorId], references: [id])
}

// заказ
model Order {
  id                    Int            @id @default(autoincrement())
  // дата создания записи (генерация)
  createdAt             DateTime       @default(now())
  // номер заказа
  orderNumber           String         @unique
  // заказчик
  customer              Customer       @relation(fields: [customerId], references: [id])
  customerId            Int
  // адрес доставки
  deliveryAddress       String
  // вид работы (позже настроим генерацию)
  workType              String
  // дата приемки
  startDate             DateTime
  // запланированная дата выдачи
  endDate               DateTime
  // список фасадов в заказе
  items                 Facade[]
  // общая площадь, считаем по фасадам
  totalArea             Float
  // стоимость метра в квадрате
  unitCost              Float
  // стоимость прямых фасадов
  costOfStraightFacades Float
  // площадь фрезеровки
  millingArea           Float
  // стоимость фрезеровки
  costOfMilling         Float
  // интегрированная ручка, метры
  handleLength          Float
  // цена интегрированной ручки
  costOfHandle          Float
  // прочие услуги, цена
  costOtherServices     Float
  // прочие услуги, описание
  otherServices         String
  // итоговая цена
  summPrice             Float
  // скидка
  discount              Float
  // общая стоимость
  totalPrice            Float
  // аванс
  prepayment            Float
  // остаток
  remainder             Float
  // число фасадов
  itemsCount            Int
  // статус
  status                OrderStatus    @relation(fields: [statusId], references: [id])
  statusId              Int
  // история изменений
  orderHistory          OrderHistory[]
  // комментарии по заказу
  workComments          WorkComment[]
  // активные работники
  workers               Worker[]
  // трудо затраты
  timeLines             WorkTimeline[]
}

generator erd {
  provider = "prisma-erd-generator"
}
